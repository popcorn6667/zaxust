#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequency in percentages.
const double english_frequencies[ALPHABET_SIZE] = {
    8.08, 1.67, 3.18, 3.99, 12.56, 2.17, 1.80, 5.27, 7.24, 0.14, 0.63, 4.04,
    2.60, 7.38, 7.47, 1.91, 0.09, 6.42, 6.59, 9.15, 2.79, 1.00, 1.89, 0.21, 1.65, 0.07
};

// Function to calculate the frequency of each letter in a given text
void calculate_letter_frequencies(const char *message, double *frequencies) {
    int letter_count[ALPHABET_SIZE] = {0};
    int total_letters = 0;

    for (int i = 0; message[i] != '\0'; i++) {
        if (isalpha(message[i])) {
            char lowercase = tolower(message[i]);
            letter_count[lowercase - 'a']++;
            total_letters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] = (double)letter_count[i] / total_letters * 100;
    }
}

// Function to compute the chi-squared statistic for a given shift
double compute_chi_squared(const double *frequencies, int shift) {
    double chi_squared = 0.0;

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        int shifted_index = (i + shift) % ALPHABET_SIZE;
        double observed = frequencies[shifted_index];
        double expected = english_frequencies[i];
        chi_squared += (observed - expected) * (observed - expected) / expected;
    }

    return chi_squared;
}

// Function to decode the message using the found shift
void decode_message(const char *message, char *decoded, int shift) {
    for (int i = 0; message[i] != '\0'; i++) {
        if (isalpha(message[i])) {
            char base = isupper(message[i]) ? 'A' : 'a';
            decoded[i] = ((message[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {
            decoded[i] = message[i];
        }
    }
    decoded[strlen(message)] = '\0';
}

int main() {
    char message[1001];
    scanf("%[^\n]", message);

    double frequencies[ALPHABET_SIZE] = {0};
    calculate_letter_frequencies(message, frequencies);

    int best_shift = 0;
    double lowest_chi_squared = 1e9;

    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        double chi_squared = compute_chi_squared(frequencies, shift);
        if (chi_squared < lowest_chi_squared) {
            lowest_chi_squared = chi_squared;
            best_shift = shift;
        }
    }

    char decoded[1001];
    decode_message(message, decoded, best_shift);

    printf("%s\n", decoded);

    return 0;
}
