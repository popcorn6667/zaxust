import sys
import math

# Функція для обчислення (base^exp) % mod
def mod_exp(base, exp, mod):
    result = 1
    base = base % mod
    while exp > 0:
        if exp % 2 == 1:
            result = (result * base) % mod
        exp = exp // 2
        base = (base * base) % mod
    return result

# Алгоритм Baby-step Giant-step для пошуку дискретного логарифму
def baby_step_giant_step(G, H, Q):
    m = int(math.sqrt(Q)) + 1
    
    # Створення таблиці для Baby-steps
    baby_steps = {}
    current = 1
    for j in range(m):
        baby_steps[current] = j
        current = (current * G) % Q

    # Обчислення G^(-m) mod Q
    g_inv_m = mod_exp(G, Q - 1 - m, Q)

    # Пошук Giant-steps
    giant_step = H
    for i in range(m):
        if giant_step in baby_steps:
            return i * m + baby_steps[giant_step]
        giant_step = (giant_step * g_inv_m) % Q
    
    return -1  # Якщо рішення не знайдено

# Вхідні дані
g, h, q = map(int, input().split())

# Виконання алгоритму
result = baby_step_giant_step(g, h, q)

if result == -1:
    print("Розв'язок не знайдено.")
else:
    print(result)
