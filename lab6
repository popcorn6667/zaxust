#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define SIZE 21

// Допоміжна функція для перевірки маски
int check_mask(int x, int y) {
    return (x + y) % 2 == 0;
}

// Функція для отримання бітів з QR-коду
void extract_bits(int qr[SIZE][SIZE], char *bits) {
    int bit_index = 0;
    for (int x = SIZE - 1; x >= 0; x -= 2) {
        if (x == 6) x--; // Пропустити вертикальну лінію позиціювання

        for (int y = (SIZE - 1); y >= 0; y--) {
            for (int dx = 0; dx < 2; dx++) {
                int xx = x - dx;
                if (xx < 0 || y == 6) continue; // Пропустити зони позиціювання

                if (check_mask(xx, y)) {
                    bits[bit_index++] = qr[y][xx] ? '0' : '1';
                } else {
                    bits[bit_index++] = qr[y][xx] ? '1' : '0';
                }

                if (bit_index == 76) return; // Зупинити, коли зібрано 76 бітів
            }
        }
    }
    bits[bit_index] = '\0';
}

// Функція для перетворення бітів у повідомлення
void decode_message(const char *bits, char *message) {
    int message_length = 0;

    // Отримати довжину повідомлення (8 біт після режиму)
    for (int i = 4; i < 12; i++) {
        message_length = (message_length << 1) | (bits[i] - '0');
    }

    // Отримати символи повідомлення
    for (int i = 0; i < message_length; i++) {
        int char_value = 0;
        for (int j = 0; j < 8; j++) {
            char_value = (char_value << 1) | (bits[12 + i * 8 + j] - '0');
        }
        message[i] = (char)char_value;
    }
    message[message_length] = '\0';
}

int main() {
    int qr[SIZE][SIZE] = {
        {1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1},
        {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1},
        {1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1},
        {0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
        {0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
        {1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0},
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
        {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1},
        {1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0},
        {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1}
    };

    char bits[77];
    char message[9];

    extract_bits(qr, bits);
    decode_message(bits, message);

    printf("Decoded message: %s\n", message);

    return 0;
}
